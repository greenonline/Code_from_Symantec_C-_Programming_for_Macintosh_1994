/* Chapter 21 - AddressBook */
/* CAddressBookPane.cp */



/****************************************************************************** CAddressBookPane.c
CAddressBookPane PanoramalEditText Class
Copyright Â© 1994 Neil Rhodes and Julie McKeehan. All rights reserved.
Generated by Visual Architect_ 8:16 AM Sun, Apr 3, 1994
This file is only generated once. You can modify it by filling
in the placeholder functions and adding any new functions you want.
If you change the name of the document class, a fresh version of this file will be generated. If you have made any changes to the file
with the old name, you will have to copy those changes to the new file by hand.
******************************************************************************/

#include "CAddressBookPane.h" 
#include "CAddressBookDoc.h" 
#include <CStaticText.h> 
#include <CBartender.h>

extern CBartender *gBartender;

#include <Commands.h> 
#include "AppCommands.h" // Uncomment to include VA-defined commands

TCL_DEFINE_CLASS_D1(CAddressBookPane, x_CAddressBookPane);

void CAddressBookPane::UpdateMenus() {
    x_CAddressBookPane::UpdateMenus();

    // now all five menu items are enabled. Disable as appropriate

    if (fAddressBookIterator->AtEnd()) 
        gBartender->DisableCmd(cmdGoForward);
    if (fAddressBookIterator->AtBeginning()) 
        gBartender->DisableCmd(cmdGoBackward);
    if (fAddressBookIterator->NoMore()) {


gBartender->DisableCmd(cmdGoToEnd); 
gBartender->DisableCmd(cmdGoToBeginning);
    }
}

void CAddressBookPane::InitialSetup(CAddressBookDoc *doc)
{
    fAddressBookDoc = doc; 
    DependUpon(fAddressBookDoc);

    fAddressBookIterator =doc->CreateDatabaseIterator(); 
    DoCmdGoToBeginning();
}

void CAddressBookPane::DoCmdGoToBeginning(void)
{
    fAddressBookiterator->MoveToBeginning(); UpdateEntryData();
}

void CAddressBookPane::DoCmdGoToEnd(void)
{
    fAddressBookiterator->MoveToEnd(); UpdateEntryData();
}

void CAddressBookPane::DoCmdGoForward(void) {
   fAddressBookiterator->MoveForward();
    UpdateEntryData();
}

void CAddressBookPane::DoCmdGoBackward(void) {
    fAddressBookiterator->MoveBackward(); 
    UpdateEntryData();
}

void CAddressBookPane::UpdateEntryData(void)
{
    const TEntry *entry= (TEntry *) fAddressBookIterator->GetCurrent();
    char name[256] = "";
    char address[256] = "";



    char city[256J = "";
    char state[256] = "";
    char zip(256] = "";
    char phone[256] = "";

    if (entry) {
        ::strcpy(name, entry->GetName()); 
        ::strcpy(address, entry->GetAddress()); 
        ::strcpy(city, entry->GetCity()); 
        ::strcpy(state, entry->GetState()); 
        ::strcpy(zip, entry->GetZip()); 
        ::strcpy(phone, entry->GetTelephone());
    }
    GetAddressBookDoc()->fAddressBook_Name->SetTextPtr(name, (long) strlen(name)); 
    GetAddressBookDoc()->fAddressBook_Address->SetTextPtr(address, (long) strlen(address)); 
    GetAddressBookDoc()->fAddressBook_City->SetTextPtr(city, (long) strlen(city)); 
    GetAddressBookDoc()->fAddressBook_State->SetTextPtr(state, (long) strlen(state)); 
    GetAddressBookDoc()->fAddressBook_Zip->SetTextPtr(zip, (long) strlen(zip));
    GetAddressBookDoc()->fAddressBook_Telephone->SetTextPtr(phone, (long) strlen(phone));
}

CAddressBookDoc *CAddressBookPane::GetAddressBookDoc() {
    return fAddressBookDoc;
}

void CAddressBookPane::ProviderChanged(CCollaborator *aProvider, long reason, void *info) {
    if (reason == kReasonNewEntry) {
        TEntry *theEntry = (TEntry *) info;

        // Display the new entry 
        fAddressBookiterator->MoveToBeginning();
        for (; !fAddressBookiterator->NoMore();
            fAddressBookiterator->MoveForward()) {
            if (theEntry == (TEntry *) fAddressBookiterator->GetCurrent())
                break;
        } 
        UpdateEntryData();
    }
}



